#!/usr/bin/env node

/**
 * Module dependencies.
 */

const fs = require("fs");
var app = require("../app");
var debug = require("debug")("myapp:server");
var https = require("https");
// Yes, TLS is required
const serverConfig = {
  key: fs.readFileSync("key.pem"),
  cert: fs.readFileSync("cert.pem")
};
var server =  https.createServer(serverConfig, app)
var io = require("socket.io")(server);

var port = normalizePort(process.env.PORT || "8000");
app.set("port", port);



io.on("connection", function(socket) {
  socket.on("room", function(room) {
    socket.join(room, () => {
      let rooms = Object.keys(io.sockets.adapter.rooms);
      socket.broadcast.emit("list_room", getRoom(rooms));
    });
  });

  socket.on("stream", (room, image) => {
    socket.broadcast.to(room).emit("stream", image);
  });

  socket.on("list_room", () => {
    let rooms = Object.keys(io.sockets.adapter.rooms);
    io.to(socket.id).emit("list_room", getRoom(rooms));
  });

  socket.on("leave_room", () => {
    setTimeout(() => {
      let rooms = Object.keys(io.sockets.adapter.rooms);
      socket.broadcast.emit("list_room", getRoom(rooms));
    }, 1000);
  });
});

const getRoom = rooms =>
  rooms.filter(room => room.length < 20 && room !== "list_room");

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
